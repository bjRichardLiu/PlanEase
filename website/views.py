from flask import Blueprint, render_template, request, flash
from flask_login import login_required, current_user
from .models import Task, ReservedTime, WakeUpTime
from . import db
from .service import delete_user_data, get_user_schedule


# split the application into multiple files
views = Blueprint('views', __name__)

@views.route('/', methods=['GET', 'POST'])
@login_required
# Generated by ChatGPT, debug needed
def home():
    if request.method == 'POST':
        # Drop all tables of the user and accept new data
        delete_user_data(current_user.id)

        # Get the data from the request
        wakeup_time_data = request.form.get('wakeup_time')
        reserved_times_data = [request.form.get(f'reserved_time_{i}') for i in range(1, 3)]
        tasks_data = [request.form.get(f'task_{i}') for i in range(1, 5)]

        # Save the data in the database
        new_wakeup_time = WakeUpTime(wakeUpTime=wakeup_time_data, user_id=current_user.id)
        db.session.add(new_wakeup_time)

        for reserved_time_data in reserved_times_data:
            new_reserved_time = ReservedTime(user_id=current_user.id, **parse_reserved_time_data(reserved_time_data))
            db.session.add(new_reserved_time)

        for task_data in tasks_data:
            new_task = Task(user_id=current_user.id, **parse_task_data(task_data))
            db.session.add(new_task)

        db.session.commit()

    return render_template("home.html", user=current_user)

def parse_reserved_time_data(data):
    # Parse the data and return a dictionary with the parameters
    # Adjust this function based on your form field names and data types
    parsed_data = {
        'data': data,
        'beginTime': 0,  # Replace 0 with the actual parsed data for beginTime
        'endTime': 0,    # Replace 0 with the actual parsed data for endTime
        'weekdaysOnly': True,  # Replace True with the actual parsed data for weekdaysOnly
    }
    return parsed_data

def parse_task_data(data):
    # Parse the data and return a dictionary with the parameters
    # Adjust this function based on your form field names and data types
    parsed_data = {
        'data': data,
        'morning': True,  # Replace True with the actual parsed data for morning
        'weekdaysOnly': True,  # Replace True with the actual parsed data for weekdaysOnly
        'deadline': 0,    # Replace 0 with the actual parsed data for deadline
        'timeRequired': 0,  # Replace 0 with the actual parsed data for timeRequired
    }
    return parsed_data








"""
@views.route('/', methods=['GET', 'POST'])
@login_required
def home():
    
    if request.method == 'POST':
        # drop all tables of the user, and accept new data
        delete_user_data()
        # Get the data from the request
        
        
        
        
        task = request.form.get('task')
        timeRequired = request.form.get('timeRequired')
        priority = request.form.get('priority')
        weekdaysOnly = request.form.get('weekdaysOnly')
        deadline = request.form.get('deadline')
        
        morning = request.form.get('morning')
        
        if len(task) < 1:
            flash('Task is too short!', category='error')
        else:
            newTask = Task(data=task, user_id=current_user.id)
            db.session.add(newTask)
            db.session.commit()
            flash('Task added!', category='success')
        
        
        # TODO load the new schedule
            
    return render_template("home.html", user=current_user)
"""